<UserControl x:Class="Knaeckebot.Controls.ActionDetailsControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Knaeckebot.Controls"
             xmlns:converters="clr-namespace:Knaeckebot.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="350">

    <UserControl.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
        <converters:InverseBoolConverter x:Key="InverseBoolConverter"/>
        <converters:KeyboardActionTypeToVisibilityConverter x:Key="KeyboardActionTypeToVisibilityConverter"/>
        <converters:BrowserActionTypeToVisibilityConverter x:Key="BrowserActionTypeToVisibilityConverter"/>
        <converters:ObjectToTypeVisibilityConverter x:Key="ObjectToTypeVisibilityConverter"/>
        <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter"/>
        <converters:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
        <converters:GreaterThanZeroConverter x:Key="GreaterThanZeroConverter"/>
        <converters:KeyToKeyItemConverter x:Key="KeyToKeyItemConverter"/>
        <converters:KeyArrayToStringConverter x:Key="KeyArrayToStringConverter"/>

        <!-- Style for compact branch action items -->
        <Style x:Key="CompactBranchActionStyle" TargetType="ListViewItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="0,0,0,1" />
            <Setter Property="BorderBrush" Value="#E0E0E0" />
        </Style>
    </UserControl.Resources>

    <DockPanel>
        <TextBlock Text="Action Details" FontWeight="Bold" Margin="5" DockPanel.Dock="Top"/>

        <TextBlock Text="No action selected" Margin="5" 
                   Visibility="{Binding IsActionSelected, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                   DockPanel.Dock="Top"/>

        <!-- Scrollable area for action details -->
        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"
                     Visibility="{Binding IsActionSelected, Converter={StaticResource BoolToVisibilityConverter}}">
            <StackPanel Margin="5">
                <!-- General properties -->
                <GroupBox Header="General" Margin="0,0,0,5" Padding="5">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding SelectedAction}" 
                               Margin="0,0,0,5" VerticalAlignment="Center"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Name:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedAction.Name, UpdateSourceTrigger=PropertyChanged}" 
                             Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Description:" Margin="0,0,5,5" 
                               VerticalAlignment="Top"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedAction.Description, UpdateSourceTrigger=PropertyChanged}" 
                             Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="60"/>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Delay (ms):" Margin="0,0,5,0" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding SelectedAction.DelayBefore, UpdateSourceTrigger=PropertyChanged}"
                             VerticalAlignment="Center"/>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for mouse actions -->
                <GroupBox Header="Mouse Action Details" Margin="0,0,0,5" Padding="5"
                      Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=MouseAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Action type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>

                        <!-- Direct selection of mouse action types with radio buttons -->
                        <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" Margin="0,0,0,5">
                            <RadioButton Content="Left click" Margin="0,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=LeftClick, Mode=TwoWay}" />
                            <RadioButton Content="Right click" Margin="5,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=RightClick, Mode=TwoWay}" />
                            <RadioButton Content="Middle click" Margin="5,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=MiddleClick, Mode=TwoWay}" />
                            <RadioButton Content="Double click" Margin="5,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=DoubleClick, Mode=TwoWay}" />
                            <RadioButton Content="Mouse wheel" Margin="5,0,0,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=MouseWheel, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Coordinates in separate input fields -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="X-Position:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0,0,0,5">
                            <TextBox Width="80" Text="{Binding SelectedAction.X, UpdateSourceTrigger=PropertyChanged}"/>
                            <Button Content="Current Position" Margin="5,0,0,0" Click="GetCurrentMousePosition_Click" 
                                ToolTip="Use current mouse position"/>
                        </StackPanel>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Y-Position:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Width="80" HorizontalAlignment="Left"
                             Text="{Binding SelectedAction.Y, UpdateSourceTrigger=PropertyChanged}"/>

                        <!-- Mouse wheel delta (always visible for mouse actions) -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Wheel delta:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
                            <TextBox Width="80" Text="{Binding SelectedAction.WheelDelta, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Text="(Positive = Up, Negative = Down)" Margin="5,0,0,0" 
                                   VerticalAlignment="Center" FontSize="11" Opacity="0.7"/>
                        </StackPanel>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for loop actions -->
                <GroupBox Header="Loop Details" Margin="0,0,0,5" Padding="5"
                      Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=LoopAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Max. iterations:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding SelectedAction.MaxIterations, UpdateSourceTrigger=PropertyChanged}" 
                             Margin="0,0,0,5" Width="80" HorizontalAlignment="Left"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="With condition:" Margin="0,0,5,0" 
                               VerticalAlignment="Center"/>
                        <CheckBox Grid.Row="1" Grid.Column="1" IsChecked="{Binding SelectedAction.UseCondition}" 
                              Margin="0,5,0,5" />

                        <!-- Condition area (only visible when UseCondition is activated) -->
                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Left side:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"
                               Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        <Grid Grid.Row="2" Grid.Column="1" Margin="0,0,0,5"
                          Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ComboBox Grid.Column="0" Width="110" Margin="0,0,5,0"
                                  ItemsSource="{Binding Source={StaticResource ConditionSourceTypeValues}}"
                                  SelectedItem="{Binding SelectedAction.LeftSourceType}"/>

                            <!-- Variable -->
                            <ComboBox Grid.Column="1" 
                                  ItemsSource="{Binding VariableNames}"
                                  SelectedValue="{Binding SelectedAction.LeftVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding SelectedAction.LeftVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  IsEditable="True"
                                  Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Variable}"/>

                            <!-- Text -->
                            <TextBox Grid.Column="1" 
                                 Text="{Binding SelectedAction.LeftCustomText, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Text}"/>

                            <!-- Clipboard (no input field needed) -->
                            <TextBlock Grid.Column="1" Text="Current clipboard content"
                                   Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Clipboard}"
                                   Opacity="0.7" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </Grid>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Comparison type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"
                               Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        <ComboBox Grid.Row="3" Grid.Column="1" Margin="0,0,0,5"
                              ItemsSource="{Binding Source={StaticResource ComparisonOperatorValues}}"
                              SelectedItem="{Binding SelectedAction.Operator}"
                              Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}"/>

                        <TextBlock Grid.Row="4" Grid.Column="0" Text="Right side:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"
                               Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        <Grid Grid.Row="4" Grid.Column="1" Margin="0,0,0,5"
                          Visibility="{Binding SelectedAction.UseCondition, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ComboBox Grid.Column="0" Width="110" Margin="0,0,5,0"
                                  ItemsSource="{Binding Source={StaticResource ConditionSourceTypeValues}}"
                                  SelectedItem="{Binding SelectedAction.RightSourceType}"/>

                            <!-- Variable -->
                            <ComboBox Grid.Column="1" 
                                  ItemsSource="{Binding VariableNames}"
                                  SelectedValue="{Binding SelectedAction.RightVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding SelectedAction.RightVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  IsEditable="True"
                                  Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Variable}"/>

                            <!-- Text -->
                            <TextBox Grid.Column="1" 
                                 Text="{Binding SelectedAction.RightCustomText, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Text}"/>

                            <!-- Clipboard (no input field needed) -->
                            <TextBlock Grid.Column="1" Text="Current clipboard content"
                                   Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Clipboard}"
                                   Opacity="0.7" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </Grid>

                        <!-- Loop actions - Header with control options -->
                        <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Text="Actions in the loop:" 
                               Margin="0,10,0,5" FontWeight="Bold"/>

                        <!-- Control elements for loop actions -->
                        <StackPanel Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" Margin="0,0,0,5">
                            <TextBlock Text="{Binding SelectedAction.LoopActions.Count, StringFormat=Number of actions: {0}}"
                                   VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <Button Content="Move up" Margin="0,0,5,0" Click="MoveLoopActionUp_Click"
                                x:Name="MoveUpButton"/>
                            <Button Content="Move down" Margin="0,0,5,0" Click="MoveLoopActionDown_Click"
                                x:Name="MoveDownButton"/>
                            <Button Content="Delete" Margin="0,0,5,0" Click="DeleteLoopAction_Click"
                                x:Name="DeleteButton"/>
                            <Button Content="Paste" Margin="0,0,5,0" Click="PasteLoopAction_Click"
                                x:Name="PasteButton"/>
                        </StackPanel>

                        <!-- Loop hint -->
                        <TextBlock Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" 
                               Text="Note: To add actions to the loop, copy actions from the main action list with Ctrl+C and paste using the Paste button above."
                               TextWrapping="Wrap" Margin="0,5,0,5" FontStyle="Italic"/>

                        <!-- ListView for loop actions -->
                        <ListView Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="2"
                              x:Name="LoopActionsListView"
                              ItemsSource="{Binding SelectedAction.LoopActions}"
                              SelectionMode="Extended"
                              MinHeight="150" MaxHeight="300"
                              Margin="0,5,0,0"
                              BorderThickness="1"
                              SelectionChanged="LoopActionsListView_SelectionChanged"
                              MouseDoubleClick="BranchAction_DoubleClick">
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <CheckBox Grid.Column="0" IsChecked="{Binding IsEnabled}" 
                                                 VerticalAlignment="Center" Margin="0,0,5,0"/>

                                        <StackPanel Grid.Column="1">
                                            <TextBlock Text="{Binding Name}" FontWeight="Bold"/>
                                            <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for variable actions -->
                <GroupBox Header="Variable Action Details" Margin="0,0,0,5" Padding="5"
                      Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=VariableAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Action type:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>
                        <ComboBox Grid.Row="0" Grid.Column="1" Margin="0,0,0,5"
                              ItemsSource="{Binding Source={StaticResource VariableActionTypeValues}}"
                              SelectedItem="{Binding SelectedAction.ActionType}"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Variable name:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>

                        <!-- HERE IS THE CHANGE: ComboBox with corrected binding for the variable -->
                        <ComboBox Grid.Row="1" Grid.Column="1" Margin="0,0,0,5"
                              ItemsSource="{Binding VariableNames}"
                              Text="{Binding SelectedAction.VariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              SelectedValue="{Binding SelectedAction.VariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              IsEditable="True"/>

                        <!-- Only with SetValue and AppendText: Value input field -->
                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Value:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=SetValue}"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Margin="0,0,0,5"
                            Text="{Binding SelectedAction.Value, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=SetValue}"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Text:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=AppendText}"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Margin="0,0,0,5"
                            Text="{Binding SelectedAction.Value, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=AppendText}"/>

                        <!-- Only with Increment/Decrement: Value input field for increment value -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Change amount:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Increment}"/>
                        <TextBox Grid.Row="3" Grid.Column="1" Margin="0,0,0,5" Width="80" HorizontalAlignment="Left"
                            Text="{Binding SelectedAction.IncrementValue, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Increment}"/>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Change amount:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Decrement}"/>
                        <TextBox Grid.Row="3" Grid.Column="1" Margin="0,0,0,5" Width="80" HorizontalAlignment="Left"
                            Text="{Binding SelectedAction.IncrementValue, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Decrement}"/>

                        <!-- Hint -->
                        <TextBlock Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,10,0,0" TextWrapping="Wrap">
                            Variables must be defined in the sequence. They will be created automatically when using a matching name.
                        </TextBlock>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for keyboard input with improved key selection -->
                <GroupBox Header="Keyboard Input Details" Margin="0,0,0,5" Padding="5"
                     Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=KeyboardAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <!-- New row for the text field with current keys -->
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Action type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>

                        <!-- Direct selection of keyboard action types with radio buttons -->
                        <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" Margin="0,0,0,5">
                            <RadioButton Content="Text" Margin="0,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=TypeText, Mode=TwoWay}" />
                            <RadioButton Content="Key" Margin="5,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=KeyPress, Mode=TwoWay}" />
                            <RadioButton Content="Combination" Margin="5,0,5,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=KeyCombination, Mode=TwoWay}" />
                            <RadioButton Content="Hotkey" Margin="5,0,0,0" IsChecked="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Hotkey, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Text field for keyboard input (only visible when TypeText is selected) -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Text:" Margin="0,0,5,5" 
                              VerticalAlignment="Center" 
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedAction.Text, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="60" 
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>

                        <!-- Clipboard option -->
                        <TextBlock Grid.Row="2" Grid.Column="0" 
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>
                        <CheckBox Grid.Row="2" Grid.Column="1" Content="Paste from clipboard" 
                             IsChecked="{Binding SelectedAction.UseClipboard}"
                             Margin="0,0,0,5" 
                             Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>

                        <!-- Single key (visible with KeyPress) -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Key:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=KeyPress}"/>

                        <!-- Modified binding for ComboBox - connection with KeyboardActionViewModel instead of directly with MainViewModel -->
                        <ComboBox Grid.Row="3" Grid.Column="1" 
                             x:Name="KeySelectionComboBox"
                             ItemsSource="{Binding Source={StaticResource KeyValuesSorted}}"
                             SelectedItem="{Binding KeyboardActionViewModel.SelectedKey, Converter={StaticResource KeyToKeyItemConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Margin="0,0,0,5"
                             IsEditable="True"
                             TextSearch.TextPath="DisplayValue"
                             Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=KeyPress}"/>

                        <!-- Key combination (visible with KeyCombination/Hotkey) -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Combination:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=KeyCombination}"/>

                        <Grid Grid.Row="3" Grid.Column="1" 
                             Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=KeyCombination}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Modifier keys - bind to KeyboardActionViewModel -->
                            <CheckBox Grid.Column="0" Content="Ctrl" Margin="0,0,5,0" 
                                  IsChecked="{Binding KeyboardActionViewModel.IsCtrlPressed}"/>
                            <CheckBox Grid.Column="1" Content="Alt" Margin="0,0,5,0" 
                                  IsChecked="{Binding KeyboardActionViewModel.IsAltPressed}"/>
                            <CheckBox Grid.Column="2" Content="Shift" Margin="0,0,5,0" 
                                  IsChecked="{Binding KeyboardActionViewModel.IsShiftPressed}"/>

                            <!-- Main key - bind to KeyboardActionViewModel -->
                            <ComboBox Grid.Column="3" 
                                 ItemsSource="{Binding Source={StaticResource KeyValuesSorted}}"
                                 SelectedItem="{Binding KeyboardActionViewModel.SelectedKey, Converter={StaticResource KeyToKeyItemConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 Margin="0,0,0,5"
                                 IsEditable="True"
                                 TextSearch.TextPath="DisplayValue"/>
                        </Grid>

                        <!-- Flexible key combination with variable keys (visible with KeyCombination/Hotkey) -->
                        <TextBlock Grid.Row="4" Grid.Column="0" Text="Flexible combination:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=KeyCombination}"/>

                        <DockPanel Grid.Row="4" Grid.Column="1" 
                             Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=KeyCombination}">

                            <!-- Controls for key combinations -->
                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="0,0,0,5">
                                <Button Content="Add key" Command="{Binding KeyCombinationViewModel.AddKeyCommand}" Margin="0,0,5,0"/>
                                <Button Content="Remove key" Command="{Binding KeyCombinationViewModel.RemoveKeyCommand}" Margin="0,0,5,0"/>
                            </StackPanel>

                            <!-- Scrollable area for keys -->
                            <ScrollViewer DockPanel.Dock="Bottom" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" Margin="0,5,0,0">
                                <ItemsControl ItemsSource="{Binding KeyCombinationViewModel.KeyEntries}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ComboBox 
                                            ItemsSource="{Binding Source={StaticResource KeyValuesSorted}}"
                                            SelectedItem="{Binding SelectedKey, Converter={StaticResource KeyToKeyItemConverter}, Mode=TwoWay}"
                                            Margin="0,0,5,0"
                                            Width="120"
                                            IsEditable="True"
                                            TextSearch.TextPath="DisplayValue"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ScrollViewer>
                        </DockPanel>

                        <!-- Delay between characters (for TypeText) -->
                        <TextBlock Grid.Row="5" Grid.Column="0" Text="Character delay (ms):" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>
                        <TextBox Grid.Row="5" Grid.Column="1" Text="{Binding SelectedAction.DelayBetweenChars, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=TypeText}"/>

                        <!-- TextBlock for the actually stored keys -->
                        <TextBlock Grid.Row="7" Grid.Column="0" Text="Stored keys:" Margin="0,10,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=Keys}"/>

                        <Border Grid.Row="7" Grid.Column="1" Margin="0,10,0,5" 
                           BorderBrush="DarkGray" BorderThickness="1" Padding="5"
                           Background="LightYellow"
                           Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource KeyboardActionTypeToVisibilityConverter}, ConverterParameter=Keys}">
                            <TextBlock Text="{Binding SelectedAction.Keys, Converter={StaticResource KeyArrayToStringConverter}}" 
                                 FontWeight="Bold" TextWrapping="Wrap"/>
                        </Border>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for wait actions -->
                <GroupBox Header="Wait Details" Margin="0,0,0,5" Padding="5"
                     Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=WaitAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="Wait time (ms):" Margin="0,0,5,0" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Column="1" Text="{Binding SelectedAction.WaitTime, UpdateSourceTrigger=PropertyChanged}"
                             Width="100" HorizontalAlignment="Left"/>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for clipboard actions -->
                <GroupBox Header="Clipboard Details" Margin="0,0,0,5" Padding="5"
                    Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=ClipboardAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Debugging TextBlock added -->
                        <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" 
                            Text="{Binding SelectedAction.Id, StringFormat=Debug Info - ClipboardAction ID: \{0\}}" 
                            FontWeight="Bold" Foreground="Blue" Margin="0,0,0,10"/>

                        <!-- Options for text input -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Source:" Margin="0,0,5,5" 
                            VerticalAlignment="Center"/>
                        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0,0,0,5">
                            <!-- Important: x:Name added and ElementName binding used -->
                            <RadioButton Content="Direct text" 
                                IsChecked="{Binding SelectedAction.UseVariable, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}" 
                                Margin="0,0,10,0"
                                x:Name="UseTextRadioButton"
                                Checked="RadioButton_DirectText_Checked"/>
                            <RadioButton Content="Use variable" 
                                IsChecked="{Binding SelectedAction.UseVariable, Mode=OneWay}"
                                x:Name="UseVariableRadioButton"
                                Checked="RadioButton_UseVariable_Checked"/>

                            <!-- Debug-Value for UseVariable -->
                            <TextBlock Margin="20,0,0,0" Foreground="Red">
                                <Run Text="UseVariable = "/>
                                <Run Text="{Binding SelectedAction.UseVariable, Mode=OneWay}"/>
                            </TextBlock>
                        </StackPanel>

                        <!-- Text input -->
                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Text:" Margin="0,0,5,5" 
                            VerticalAlignment="Top"
                            Visibility="{Binding ElementName=UseTextRadioButton, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedAction.Text, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="100"
                            Visibility="{Binding ElementName=UseTextRadioButton, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter}}"/>

                        <!-- Variable selection -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Variable:" Margin="0,0,5,5" 
                            VerticalAlignment="Center"
                            Visibility="{Binding ElementName=UseVariableRadioButton, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter}}"/>

                        <!-- ComboBox with corrected binding -->
                        <ComboBox Grid.Row="3" Grid.Column="1" 
                            ItemsSource="{Binding VariableNames}"
                            Text="{Binding SelectedAction.VariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedValue="{Binding SelectedAction.VariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Margin="0,0,0,5"
                            IsEditable="True"
                            Visibility="{Binding ElementName=UseVariableRadioButton, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter}}"/>

                        <TextBlock Grid.Row="4" Grid.Column="0" 
                            VerticalAlignment="Center"/>
                        <CheckBox Grid.Row="4" Grid.Column="1" Content="Append to existing text" 
                            IsChecked="{Binding SelectedAction.AppendToClipboard, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="5" Grid.Column="0" Text="Retries:" Margin="0,0,5,5" 
                            VerticalAlignment="Center"/>
                        <TextBox Grid.Row="5" Grid.Column="1" Text="{Binding SelectedAction.RetryCount, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="6" Grid.Column="0" Text="Wait time (ms):" Margin="0,0,5,5" 
                            VerticalAlignment="Center"/>
                        <TextBox Grid.Row="6" Grid.Column="1" Text="{Binding SelectedAction.RetryWaitTime, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for JSON actions -->
                <GroupBox Header="JSON Action Details" Margin="0,0,0,5" Padding="5"
                     Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=JsonAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Source:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <CheckBox Grid.Row="0" Grid.Column="1" Content="Read from clipboard" 
                             IsChecked="{Binding SelectedAction.CheckClipboard}"
                             Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="JSON Template:" Margin="0,0,5,5" 
                              VerticalAlignment="Top"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedAction.JsonTemplate, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="100"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="X-Offset:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedAction.OffsetX, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Y-Offset:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>
                        <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding SelectedAction.OffsetY, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="4" Grid.Column="0" Text="Retries:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>
                        <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding SelectedAction.RetryCount, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="5" Grid.Column="0" Text="Wait time (ms):" Margin="0,0,5,5" 
                              VerticalAlignment="Center"/>
                        <TextBox Grid.Row="5" Grid.Column="1" Text="{Binding SelectedAction.RetryWaitTime, UpdateSourceTrigger=PropertyChanged}" 
                            Width="80" HorizontalAlignment="Left"
                            Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="6" Grid.Column="0" 
                              VerticalAlignment="Center"/>
                        <CheckBox Grid.Row="6" Grid.Column="1" Content="Continue on errors" 
                             IsChecked="{Binding SelectedAction.ContinueOnError}"
                             Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="7" Grid.Column="0" Text="Note:" Margin="0,0,5,5" 
                              VerticalAlignment="Top" FontWeight="Bold"/>
                        <TextBlock Grid.Row="7" Grid.Column="1" TextWrapping="Wrap" Margin="0,0,0,5">
                            In case of problems with the JSON format, the action will be retried after a waiting period.
                            After failed retry attempts, it will continue or abort depending on the setting.
                        </TextBlock>

                        <WrapPanel Grid.Row="8" Grid.Column="1" Orientation="Horizontal" Margin="0,10,0,0">
                            <Button Content="Sequence JSON Example" Click="GenerateSequenceJson_Click" Margin="0,0,5,5"/>
                            <Button Content="Sequence with Vars Example" Click="GenerateSequenceWithVarsJson_Click" Margin="0,0,5,5"/>
                            <Button Content="Click JSON Example" Click="GenerateClickJson_Click" Margin="0,0,5,5"/>
                            <Button Content="Wait JSON Example" Click="GenerateWaitJson_Click" Margin="0,0,0,5"/>
                        </WrapPanel>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for browser actions -->
                <GroupBox Header="Browser Details" Margin="0,0,0,5" Padding="5"
                     Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=BrowserAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Action type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <ComboBox Grid.Row="0" Grid.Column="1" 
                              ItemsSource="{Binding Source={StaticResource BrowserActionTypeValues}}"
                              SelectedItem="{Binding SelectedAction.ActionType, Mode=TwoWay}"
                              Margin="0,0,0,5"/>

                        <!-- Selector (visible with FindElementAndClick) -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Selector:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=FindElementAndClick}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedAction.Selector, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,5"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=FindElementAndClick}"/>

                        <!-- JavaScript (visible with ExecuteJavaScript) -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="JavaScript:" Margin="0,0,5,5" 
                              VerticalAlignment="Top"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=ExecuteJavaScript}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedAction.JavaScript, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="100"
                            Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=ExecuteJavaScript}"/>

                        <!-- Coordinates (visible with GetCoordinates) -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Last coordinates:" Margin="0,0,5,5" 
                              VerticalAlignment="Center"
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=GetCoordinates}"/>
                        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0,0,0,5"
                               Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=GetCoordinates}">
                            <TextBlock Text="X:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                            <TextBox Width="50" Text="{Binding SelectedAction.XResult, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Text="Y:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                            <TextBox Width="50" Text="{Binding SelectedAction.YResult, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>

                        <!-- Option to use last results (visible with GetCoordinates) -->
                        <TextBlock Grid.Row="2" Grid.Column="0" 
                              Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=GetCoordinates}"/>
                        <CheckBox Grid.Row="2" Grid.Column="1" Content="Use saved coordinates" 
                             IsChecked="{Binding SelectedAction.UseLastResults}"
                             Margin="0,0,0,0" 
                             Visibility="{Binding SelectedAction.ActionType, Converter={StaticResource BrowserActionTypeToVisibilityConverter}, ConverterParameter=GetCoordinates}"/>
                    </Grid>
                </GroupBox>

                <!-- Specific properties for If actions -->
                <GroupBox Header="If Action Details" Margin="0,0,0,5" Padding="5"
                     Visibility="{Binding SelectedAction, Converter={StaticResource ObjectToTypeVisibilityConverter}, ConverterParameter=IfAction}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Condition area -->
                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Left side:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,0,5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ComboBox Grid.Column="0" Width="110" Margin="0,0,5,0"
                                  ItemsSource="{Binding Source={StaticResource ConditionSourceTypeValues}}"
                                  SelectedItem="{Binding SelectedAction.LeftSourceType}"/>

                            <!-- Variable -->
                            <ComboBox Grid.Column="1" 
                                  ItemsSource="{Binding VariableNames}"
                                  SelectedValue="{Binding SelectedAction.LeftVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding SelectedAction.LeftVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  IsEditable="True"
                                  Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Variable}"/>

                            <!-- Text -->
                            <TextBox Grid.Column="1" 
                                 Text="{Binding SelectedAction.LeftCustomText, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Text}"/>

                            <!-- Clipboard (no input field needed) -->
                            <TextBlock Grid.Column="1" Text="Current clipboard content"
                                   Visibility="{Binding SelectedAction.LeftSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Clipboard}"
                                   Opacity="0.7" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </Grid>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Comparison type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <ComboBox Grid.Row="1" Grid.Column="1" Margin="0,0,0,5"
                              ItemsSource="{Binding Source={StaticResource ComparisonOperatorValues}}"
                              SelectedItem="{Binding SelectedAction.Operator}"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Right side:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <Grid Grid.Row="2" Grid.Column="1" Margin="0,0,0,5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ComboBox Grid.Column="0" Width="110" Margin="0,0,5,0"
                                  ItemsSource="{Binding Source={StaticResource ConditionSourceTypeValues}}"
                                  SelectedItem="{Binding SelectedAction.RightSourceType}"/>

                            <!-- Variable -->
                            <ComboBox Grid.Column="1" 
                                  ItemsSource="{Binding VariableNames}"
                                  SelectedValue="{Binding SelectedAction.RightVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding SelectedAction.RightVariableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  IsEditable="True"
                                  Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Variable}"/>

                            <!-- Text -->
                            <TextBox Grid.Column="1" 
                                 Text="{Binding SelectedAction.RightCustomText, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Text}"/>

                            <!-- Clipboard (no input field needed) -->
                            <TextBlock Grid.Column="1" Text="Current clipboard content"
                                   Visibility="{Binding SelectedAction.RightSourceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Clipboard}"
                                   Opacity="0.7" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </Grid>

                        <!-- THEN actions - Header with control options -->
                        <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Text="THEN actions:" 
                               Margin="0,10,0,5" FontWeight="Bold"/>

                        <!-- Control elements for then actions -->
                        <StackPanel Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" Margin="0,0,0,5">
                            <TextBlock Text="{Binding SelectedAction.ThenActions.Count, StringFormat=Number of actions: {0}}"
                                   VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <Button Content="Move ↑" Margin="0,0,5,0" Click="MoveThenActionUp_Click"
                                x:Name="MoveUpThenButton" ToolTip="Move selected actions up"/>
                            <Button Content="Move ↓" Margin="0,0,5,0" Click="MoveThenActionDown_Click"
                                x:Name="MoveDownThenButton" ToolTip="Move selected actions down"/>
                            <Button Content="Delete" Margin="0,0,5,0" Click="DeleteThenAction_Click"
                                x:Name="DeleteThenButton" ToolTip="Delete selected actions"/>
                            <Button Content="Paste" Margin="0,0,5,0" Click="PasteThenAction_Click"
                                x:Name="PasteThenButton" ToolTip="Paste copied actions"/>
                            <Button Content="Copy" Margin="0,0,5,0" Click="CopyThenAction_Click"
                                x:Name="CopyThenButton" ToolTip="Copy selected actions"/>
                        </StackPanel>

                        <!-- ListView for then actions with more compact display -->
                        <ListView Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2"
                              x:Name="ThenActionsListView"
                              ItemsSource="{Binding SelectedAction.ThenActions}"
                              SelectionMode="Extended"
                              Height="100" 
                              Margin="0,5,0,10"
                              BorderThickness="1"
                              SelectionChanged="ThenActionsListView_SelectionChanged"
                              MouseDoubleClick="BranchAction_DoubleClick">
                            <ListView.ItemContainerStyle>
                                <Style BasedOn="{StaticResource CompactBranchActionStyle}" TargetType="ListViewItem"/>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <CheckBox Grid.Column="0" IsChecked="{Binding IsEnabled}" 
                                                 VerticalAlignment="Center" Margin="0,0,3,0"/>

                                        <TextBlock Grid.Column="1" FontWeight="SemiBold">
                                            <Run Text="{Binding Name}"/>
                                            <Run Text=" - " Foreground="#777777"/>
                                            <Run Text="{Binding DelayBefore}" Foreground="#777777"/>
                                            <Run Text="ms" Foreground="#777777"/>
                                        </TextBlock>
                                    </Grid>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>

                        <!-- ELSE branch configuration -->
                        <TextBlock Grid.Row="6" Grid.Column="0" Text="Use ELSE branch:" Margin="0,0,5,0" 
                               VerticalAlignment="Center"/>
                        <CheckBox Grid.Row="6" Grid.Column="1" IsChecked="{Binding SelectedAction.UseElseBranch}" 
                              Margin="0,5,0,5" x:Name="UseElseBranchCheckBox" Checked="UseElseBranch_CheckedChanged" Unchecked="UseElseBranch_CheckedChanged" />

                        <!-- Note about shortcuts - moved to its own row to prevent overlap -->
                        <TextBlock Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" 
                               Text="Note: Double-click on any action in the branches to show its details."
                               TextWrapping="Wrap" Margin="0,5,0,5" FontStyle="Italic"/>

                        <!-- ELSE actions section - moved to row 8 to avoid overlap -->
                        <Border Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" 
                           BorderBrush="DarkGray" BorderThickness="1" Margin="0,5,0,0" Padding="5"
                           Visibility="{Binding SelectedAction.UseElseBranch, Converter={StaticResource BoolToVisibilityConverter}}"
                           Panel.ZIndex="100">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <!-- ELSE actions - Header with control options -->
                                <TextBlock Grid.Row="0" Text="ELSE actions:" 
                                       Margin="0,0,0,5" FontWeight="Bold"/>

                                <!-- Control elements for else actions -->
                                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,5">
                                    <TextBlock Text="{Binding SelectedAction.ElseActions.Count, StringFormat=Number of actions: {0}}"
                                           VerticalAlignment="Center" Margin="0,0,10,0"/>
                                    <Button Content="Move ↑" Margin="0,0,5,0" Click="MoveElseActionUp_Click"
                                        x:Name="MoveUpElseButton" ToolTip="Move selected actions up"/>
                                    <Button Content="Move ↓" Margin="0,0,5,0" Click="MoveElseActionDown_Click"
                                        x:Name="MoveDownElseButton" ToolTip="Move selected actions down"/>
                                    <Button Content="Delete" Margin="0,0,5,0" Click="DeleteElseAction_Click"
                                        x:Name="DeleteElseButton" ToolTip="Delete selected actions"/>
                                    <Button Content="Paste" Margin="0,0,5,0" Click="PasteElseAction_Click"
                                        x:Name="PasteElseButton" ToolTip="Paste copied actions"/>
                                    <Button Content="Copy" Margin="0,0,5,0" Click="CopyElseAction_Click"
                                        x:Name="CopyElseButton" ToolTip="Copy selected actions"/>
                                </StackPanel>

                                <!-- ListView for else actions with more compact display -->
                                <ListView Grid.Row="2"
                                      x:Name="ElseActionsListView"
                                      ItemsSource="{Binding SelectedAction.ElseActions}"
                                      SelectionMode="Extended"
                                      Height="100" 
                                      Margin="0,5,0,0"
                                      BorderThickness="1"
                                      SelectionChanged="ElseActionsListView_SelectionChanged"
                                      MouseDoubleClick="BranchAction_DoubleClick">
                                    <ListView.ItemContainerStyle>
                                        <Style BasedOn="{StaticResource CompactBranchActionStyle}" TargetType="ListViewItem"/>
                                    </ListView.ItemContainerStyle>
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <Grid Margin="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>

                                                <CheckBox Grid.Column="0" IsChecked="{Binding IsEnabled}" 
                                                         VerticalAlignment="Center" Margin="0,0,3,0"/>

                                                <TextBlock Grid.Column="1" FontWeight="SemiBold">
                                                    <Run Text="{Binding Name}"/>
                                                    <Run Text=" - " Foreground="#777777"/>
                                                    <Run Text="{Binding DelayBefore}" Foreground="#777777"/>
                                                    <Run Text="ms" Foreground="#777777"/>
                                                </TextBlock>
                                            </Grid>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </Grid>
                        </Border>
                    </Grid>
                </GroupBox>

                <!-- Action Details Area for Branch Actions -->
                <GroupBox Header="Branch Action Details" Margin="0,0,0,5" Padding="5" 
                          x:Name="BranchActionDetailsGroup"
                          Visibility="Collapsed">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Action Type:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" x:Name="BranchActionType" Text="-" 
                               Margin="0,0,0,5" VerticalAlignment="Center" FontWeight="Bold"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Name:" Margin="0,0,5,5" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="1" Grid.Column="1" x:Name="BranchActionName" Text=""
                             Margin="0,0,0,5"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="Description:" Margin="0,0,5,5" 
                               VerticalAlignment="Top"/>
                        <TextBox Grid.Row="2" Grid.Column="1" x:Name="BranchActionDescription" Text=""
                             Margin="0,0,0,5" TextWrapping="Wrap" AcceptsReturn="True" Height="60"/>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="Delay (ms):" Margin="0,0,5,0" 
                               VerticalAlignment="Center"/>
                        <TextBox Grid.Row="3" Grid.Column="1" x:Name="BranchActionDelay" Text=""
                             VerticalAlignment="Center"/>

                        <Button Grid.Row="4" Grid.Column="1" Content="Apply Changes" 
                                x:Name="ApplyBranchActionChanges" Click="ApplyBranchActionChanges_Click"
                                HorizontalAlignment="Right" Margin="0,10,0,0"/>
                    </Grid>
                </GroupBox>
            </StackPanel>
        </ScrollViewer>
    </DockPanel>
</UserControl>